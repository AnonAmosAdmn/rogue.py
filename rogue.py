import pygame
import random
import sys
import math
import base64
from io import BytesIO
from pygame.locals import *
import os

# Hide the pygame welcome message
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = 'hide'

# Initialize pygame
pygame.init()
pygame.font.init()

# Game settings
SCREEN_WIDTH, SCREEN_HEIGHT = 2048, 1536
GRID_SIZE = 32
FPS = 60

# MiniMap settings
MINIMAP_WIDTH = 300
MINIMAP_HEIGHT = 300
MINIMAP_CELL_SIZE = 3
MINIMAP_POSITION = (SCREEN_WIDTH - MINIMAP_WIDTH - 10, 10)

# Colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 50, 50)
GREEN = (50, 255, 50)
BLUE = (50, 50, 255)
YELLOW = (255, 255, 50)
PURPLE = (150, 50, 255)
GRAY = (100, 100, 100)
DARK_GRAY = (50, 50, 50)
DARKER_GRAY = (20, 20, 20)
STONE = (120, 120, 120)

# Create screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Dark Dungeon")
clock = pygame.time.Clock()

# Fonts
font_small = pygame.font.SysFont('Arial', 16)
font_medium = pygame.font.SysFont('Arial', 24)
font_large = pygame.font.SysFont('Arial', 32)

# Load images from Base64 strings
def load_base64_image(base64_string, size=(GRID_SIZE, GRID_SIZE)):
    """Load an image from a base64 string and resize it."""
    image_data = base64.b64decode(base64_string)
    image = pygame.image.load(BytesIO(image_data))
    return pygame.transform.scale(image, size)

# Placeholder Base64 images (replace these with your actual Base64 strings)
PLAYER_IMAGE = "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"
GOBLIN_IMAGE = ""
ORC_IMAGE = "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"
SKELETON_IMAGE = ""
ZOMBIE_IMAGE = ""
TROLL_IMAGE = ""
GHOST_IMAGE = ""
HEALTH_POTION_IMAGE = "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"
WEAPON_IMAGE = ""
ARMOR_IMAGE = "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"
EXIT_IMAGE = "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"

# A single tile on the game map
class Tile:
    def __init__(self, x, y, tile_type):
        self.x = x  # X-coordinate of the tile
        self.y = y  # Y-coordinate of the tile
        self.type = tile_type  # Type of tile: 0 = wall, 1 = floor, 2 = door
        self.explored = False  # Whether the player has ever seen this tile
        self.visible = False   # Whether the tile is currently in the player's field of view

# A rectangular room within the dungeon
class Room:
    def __init__(self, x, y, w, h):
        self.x = x  # Top-left corner X-coordinate
        self.y = y  # Top-left corner Y-coordinate
        self.w = w  # Width of the room
        self.h = h  # Height of the room
        self.center = (x + w // 2, y + h // 2)  # Center point of the room (used for connecting rooms)

    # Check if this room intersects with another room
    def intersects(self, other):
        return (self.x < other.x + other.w and  # This room's left edge is left of other room's right edge
                self.x + self.w > other.x and  # This room's right edge is right of other room's left edge
                self.y < other.y + other.h and  # This room's top edge is above other room's bottom edge
                self.y + self.h > other.y)  # This room's bottom edge is below other room's top edge


# Represents any character or object in the game world (player, enemies, items)
class Entity:
    def __init__(self, x, y, char, color, name, hp=1, attack=0, defense=0, exp=0):
        self.x = x  # X-coordinate on the map
        self.y = y  # Y-coordinate on the map
        self.char = char  # ASCII character used to represent the entity (fallback for no sprite)
        self.color = color  # Color used for fallback drawing
        self.name = name  # Name of the entity (used for identifying type)
        self.max_hp = hp  # Maximum health
        self.hp = hp  # Current health
        self.attack = attack  # Attack value (damage output)
        self.defense = defense  # Defense value (damage reduction)
        self.exp = exp  # Experience points awarded for killing this entity
        self.alive = True  # Whether the entity is currently alive
        self.sprite = None  # Placeholder for loaded image/sprite

        # Attempt to load a sprite based on the entity's name
        self.load_sprite()

    def load_sprite(self):
        """Load graphical sprite based on entity type"""
        try:
            # Map entity names to their sprite images
            sprite_mapping = {
                "Player": PLAYER_IMAGE,
                "goblin": GOBLIN_IMAGE,
                "orc": ORC_IMAGE,
                "skeleton": SKELETON_IMAGE,
                "zombie": ZOMBIE_IMAGE,
                "troll": TROLL_IMAGE,
                "ghost": GHOST_IMAGE,
                "Health Potion": HEALTH_POTION_IMAGE,
                "Weapon": WEAPON_IMAGE,
                "Armor": ARMOR_IMAGE
            }
            
            if self.name in sprite_mapping:
                self.sprite = load_base64_image(sprite_mapping[self.name])
        except Exception as e:
            # Fallback to simple colored circle if sprite loading fails
            self.sprite = pygame.Surface((GRID_SIZE, GRID_SIZE))
            self.sprite.fill(BLACK)
            pygame.draw.circle(
                self.sprite, 
                self.color, 
                (GRID_SIZE//2, GRID_SIZE//2), 
                GRID_SIZE//2 - 2
            )

    def draw(self, surface, x, y, size):
        """Render entity on screen at specified pixel coordinates"""
        if self.sprite:
            # Draw loaded sprite if available
            surface.blit(self.sprite, (x, y))
        else:
            # Fallback to character representation
            text = font_medium.render(self.char, True, self.color)
            surface.blit(text, (x, y))


# Represents the player character in the game, inheriting from Entity
class Player(Entity):
    def __init__(self, x, y):
        # Initialize the player using the base Entity constructor with specific values
        super().__init__(x, y, "@", GREEN, "Player", 30, 8, 5)  # char = "@", color = GREEN, hp = 30, attack = 8, defense = 5
        self.level = 1  # Starting level
        self.exp = 0  # Current experience points
        self.next_level = 100  # Experience needed to reach next level
        self.vision_radius = 8  # Radius of field of view for revealing tiles
        self.crit_chance = 0.1  # 10% chance to deal a critical hit
        self.crit_multiplier = 1.5  # Critical hits deal 1.5x damage

    def level_up(self):
        """Increase player stats when leveling up."""
        self.level += 1  # Increase level by 1
        self.max_hp += 10 + self.level  # Increase max HP based on level
        self.hp = self.max_hp  # Restore HP to full
        self.attack += 3 + self.level // 2  # Increase attack (scaling with level)
        self.defense += 2 + self.level // 3  # Increase defense (scaling with level)
        self.next_level = self.level * 100  # Set experience needed for next level
        self.crit_chance = min(0.3, self.crit_chance + 0.02)  # Slightly increase crit chance (capped at 30%)
        
        return f"Level up! You are now level {self.level}!"


class Game:
    def __init__(self):
        self.map_width = 100
        self.map_height = 100
        self.tiles = [[Tile(x, y, 0) for x in range(self.map_width)] for y in range(self.map_height)]
        self.player = Player(0, 0)  # Initialize player with dummy position
        self.entities = []
        self.items = []
        self.exit_pos = (0, 0)
        self.message = ""
        self.message_time = 0
        self.camera_x = 0
        self.camera_y = 0
        self.game_state = "playing"
        self.dungeon_level = 1
        self.combat_log = []
        self.max_log_entries = 10
        self.generate_dungeon()
    
    def generate_dungeon(self):
        # Reset map to all walls
        self.tiles = [[Tile(x, y, 0) for x in range(self.map_width)] for y in range(self.map_height)]
        self.entities = []
        self.items = []
        self.combat_log = []
        
        # Generate rooms - larger and more at deeper levels
        rooms = []
        max_rooms = 20 + self.dungeon_level  # More rooms at deeper levels
        min_room_size = 8 + self.dungeon_level // 2  # Larger rooms at deeper levels
        max_room_size = 15 + self.dungeon_level // 2  # Larger max size at deeper levels
        
        # Ensure room sizes don't exceed map bounds
        min_room_size = min(min_room_size, 15) # Prevent too small rooms
        max_room_size = min(max_room_size, 20) # Prevent too large rooms
        
        player_placed = False
        
        for _ in range(max_rooms):
            # Random room size and position
            w = random.randint(min_room_size, max_room_size)
            h = random.randint(min_room_size, max_room_size)
            x = random.randint(1, self.map_width - w - 1)
            y = random.randint(1, self.map_height - h - 1)
            
            new_room = Room(x, y, w, h)
            
            # Check for intersections with other rooms
            failed = False
            for other_room in rooms:
                if new_room.intersects(other_room):
                    failed = True
                    break
            
            if not failed:
                # Carve out the room
                self.carve_room(new_room)
                
                # Center coordinates of new room
                (new_x, new_y) = new_room.center
                
                # Place player in first room if not already placed
                if not player_placed:
                    self.player.x, self.player.y = new_x, new_y
                    player_placed = True
                else:
                    # Connect to previous room with a tunnel
                    prev_center = rooms[-1].center
                    
                    # Flip a coin (random number 0 or 1)
                    if random.randint(0, 1) == 1:
                        # First move horizontally, then vertically
                        self.carve_h_tunnel(prev_center[0], new_x, prev_center[1])
                        self.carve_v_tunnel(prev_center[1], new_y, new_x)
                    else:
                        # First move vertically, then horizontally
                        self.carve_v_tunnel(prev_center[1], new_y, prev_center[0])
                        self.carve_h_tunnel(prev_center[0], new_x, new_y)
                
                # Place entities
                self.place_entities(new_room)
                
                # Append the new room to the list
                rooms.append(new_room)
        
        # If no rooms were generated (shouldn't happen), place player at (1,1)
        if not player_placed:
            self.player.x, self.player.y = 1, 1
            self.tiles[1][1].type = 1  # Ensure it's a floor tile
        
        # Place exit in last room if rooms exist
        if rooms:
            last_room = rooms[-1]
            self.exit_pos = last_room.center
            self.tiles[self.exit_pos[1]][self.exit_pos[0]].type = 2  # 2 = exit
        
        # Update FOV after generation
        self.update_fov()
    
    def carve_room(self, room):
        # Set all tiles in the room to floor
        for y in range(room.y + 1, room.y + room.h):
            for x in range(room.x + 1, room.x + room.w):
                self.tiles[y][x].type = 1  # Floor
    
    def carve_h_tunnel(self, x1, x2, y):
        # Horizontal tunnel
        for x in range(min(x1, x2), max(x1, x2) + 1):
            self.tiles[y][x].type = 1  # Floor
    
    def carve_v_tunnel(self, y1, y2, x):
        # Vertical tunnel
        for y in range(min(y1, y2), max(y1, y2) + 1):
            self.tiles[y][x].type = 1  # Floor
    
    def place_entities(self, room):
        # Place enemies - more enemies and stronger as dungeon level increases
        num_enemies = random.randint(0, 2 + self.dungeon_level // 2)  # More enemies at deeper levels
        
        enemy_types = ["goblin", "orc", "skeleton", "zombie", "troll", "ghost"]
        enemy_chars = ["g", "o", "s", "z", "T", "G"]
        enemy_colors = [GREEN, GREEN, WHITE, WHITE, (0, 150, 0), (150, 150, 255)]
        
        for _ in range(num_enemies):
            # Choose random position in room
            x = random.randint(room.x + 1, room.x + room.w - 1)
            y = random.randint(room.y + 1, room.y + room.h - 1)
            
            # Only place if it's a floor and not occupied by player, exit, or other entities
            if (self.tiles[y][x].type == 1 and 
                not any(e.x == x and e.y == y for e in self.entities) and
                (x, y) != (self.player.x, self.player.y) and
                (x, y) != self.exit_pos):
                enemy_type = random.randint(0, len(enemy_types)-1)
                
                # Base stats + scaling with dungeon level
                hp = random.randint(15, 25) + (self.dungeon_level - 1) * 5  # More HP
                attack = random.randint(4, 8) + (self.dungeon_level - 1) * 2  # Harder hits
                defense = random.randint(1, 3) + (self.dungeon_level - 1)  # Better defense
                exp = random.randint(10, 25) + (self.dungeon_level - 1) * 2
                
                # Special abilities for certain enemies
                special = {}
                if enemy_types[enemy_type] == "troll":
                    hp *= 1.5  # Trolls have more HP
                    special["regeneration"] = True
                elif enemy_types[enemy_type] == "ghost":
                    defense += 2  # Ghosts are harder to hit
                    special["dodge_chance"] = 0.2  # 20% chance to dodge attacks
                
                enemy = Entity(x, y, enemy_chars[enemy_type], enemy_colors[enemy_type], 
                            enemy_types[enemy_type], hp, attack, defense, exp)
                if special:
                    enemy.special = special
                self.entities.append(enemy)
        
        # Place items - better items at deeper levels
        if random.random() < 0.4:  # 40% chance for item
            # Try to find a valid position (up to 10 attempts)
            attempts = 0
            placed = False
            while attempts < 10 and not placed:
                x = random.randint(room.x + 1, room.x + room.w - 1)
                y = random.randint(room.y + 1, room.y + room.h - 1)
                
                # Check if position is valid (floor, not occupied, not player start, not exit)
                if (self.tiles[y][x].type == 1 and 
                    not any(e.x == x and e.y == y for e in self.entities) and
                    not any(i.x == x and i.y == y for i in self.items) and
                    (x, y) != (self.player.x, self.player.y) and
                    (x, y) != self.exit_pos):
                    
                    item_type = random.choice(["health", "weapon", "armor"])
                    
                    if item_type == "health":
                        item = Entity(x, y, "H", RED, "Health Potion")
                        item.effect = "heal"
                        item.amount = random.randint(10, 25) + (self.dungeon_level - 1) * 5
                    elif item_type == "weapon":
                        item = Entity(x, y, "W", BLUE, "Weapon")
                        item.effect = "attack"
                        item.amount = random.randint(1, 3) + (self.dungeon_level - 1)
                    else:  # armor
                        item = Entity(x, y, "A", BLUE, "Armor")
                        item.effect = "defense"
                        item.amount = random.randint(1, 2) + (self.dungeon_level - 1)
                    
                    self.items.append(item)
                    placed = True
                    
                attempts += 1
    
    def update_fov(self):
        # Reset current visibility (but keep explored state)
        for y in range(self.map_height):
            for x in range(self.map_width):
                self.tiles[y][x].visible = False
        
        # Calculate new visibility
        for y in range(max(0, self.player.y - self.player.vision_radius), 
                    min(self.map_height, self.player.y + self.player.vision_radius + 1)):
            for x in range(max(0, self.player.x - self.player.vision_radius), 
                        min(self.map_width, self.player.x + self.player.vision_radius + 1)):
                dx = x - self.player.x
                dy = y - self.player.y
                distance_squared = dx*dx + dy*dy
                
                if distance_squared <= self.player.vision_radius ** 2:
                    # Simple line of sight check
                    visible = True
                    steps = max(abs(dx), abs(dy))
                    
                    if steps > 0:
                        step_x = dx / steps
                        step_y = dy / steps
                        
                        for i in range(1, steps):
                            check_x = int(self.player.x + i * step_x)
                            check_y = int(self.player.y + i * step_y)
                            
                            if (0 <= check_x < self.map_width and 
                                0 <= check_y < self.map_height):
                                if self.tiles[check_y][check_x].type == 0:  # Wall
                                    visible = False
                                    break
                    
                    if visible:
                        self.tiles[y][x].visible = True
                        self.tiles[y][x].explored = True
    
    def update_camera(self):
        # Center camera on player
        self.camera_x = self.player.x * GRID_SIZE - SCREEN_WIDTH // 2
        self.camera_y = self.player.y * GRID_SIZE - SCREEN_HEIGHT // 2
        
        # Clamp camera to map bounds
        max_x = self.map_width * GRID_SIZE - SCREEN_WIDTH
        max_y = self.map_height * GRID_SIZE - SCREEN_HEIGHT
        self.camera_x = max(0, min(self.camera_x, max_x))
        self.camera_y = max(0, min(self.camera_y, max_y))
    
    def move_player(self, dx, dy):
        new_x, new_y = self.player.x + dx, self.player.y + dy
        
        # Check bounds
        if new_x < 0 or new_y < 0 or new_x >= self.map_width or new_y >= self.map_height:
            self.add_message("You can't go that way!")
            return
        
        # Check walls
        if self.tiles[new_y][new_x].type == 0:
            self.add_message("You can't walk through walls!")
            return
        
        # Check exit
        if (new_x, new_y) == self.exit_pos:
            self.dungeon_level += 1
            self.add_message(f"Descending to dungeon level {self.dungeon_level}...")
            self.generate_dungeon()
            self.update_fov()
            return
        
        # Check entities
        for entity in self.entities[:]:
            if (entity.x, entity.y) == (new_x, new_y):
                self.fight(entity)
                return
        
        # Check items
        for item in self.items[:]:
            if (item.x, item.y) == (new_x, new_y):
                self.pick_up_item(item)
                self.player.x, self.player.y = new_x, new_y
                self.update_fov()
                return
        
        # Move player
        self.player.x, self.player.y = new_x, new_y
        self.update_fov()
    
    def fight(self, enemy):
        # Player attacks enemy
        player_damage = self.calculate_damage(self.player, enemy)
        
        # Check for enemy dodge
        if hasattr(enemy, 'special') and 'dodge_chance' in enemy.special:
            if random.random() < enemy.special['dodge_chance']:
                self.add_message(f"{enemy.name} dodged your attack!")
                self.add_to_log(f"{enemy.name} dodged your attack!")
            else:
                enemy.hp -= player_damage
                self.add_message(f"You hit {enemy.name} for {player_damage} damage!")
                self.add_to_log(f"You hit {enemy.name} for {player_damage} damage!")
        else:
            enemy.hp -= player_damage
            self.add_message(f"You hit {enemy.name} for {player_damage} damage!")
            self.add_to_log(f"You hit {enemy.name} for {player_damage} damage!")
        
        if enemy.hp <= 0:
            enemy.alive = False
            self.entities.remove(enemy)
            self.player.exp += enemy.exp
            self.add_message(f"You defeated {enemy.name}! Gained {enemy.exp} XP.")
            self.add_to_log(f"You defeated {enemy.name}! Gained {enemy.exp} XP.")
            
            # Check level up
            if self.player.exp >= self.player.next_level:
                level_up_msg = self.player.level_up()
                self.add_message(level_up_msg)
                self.add_to_log(level_up_msg)
            
            # Move to enemy's position after defeating it
            self.player.x, self.player.y = enemy.x, enemy.y
            self.update_fov()
        else:
            # Enemy attacks player if alive
            if enemy.alive:
                enemy_damage = self.calculate_damage(enemy, self.player)
                self.player.hp -= enemy_damage
                self.add_message(f"{enemy.name} hits you for {enemy_damage} damage!")
                self.add_to_log(f"{enemy.name} hits you for {enemy_damage} damage!")
                
                # Check for enemy regeneration
                if hasattr(enemy, 'special') and 'regeneration' in enemy.special:
                    regen_amount = random.randint(1, 3)
                    enemy.hp = min(enemy.max_hp, enemy.hp + regen_amount)
                    self.add_message(f"{enemy.name} regenerates {regen_amount} HP!")
                    self.add_to_log(f"{enemy.name} regenerates {regen_amount} HP!")
                
                if self.player.hp <= 0:
                    self.game_state = "game_over"
                    self.add_message("You have been defeated! Game Over.")
                    self.add_to_log("You have been defeated! Game Over.")
    
    def calculate_damage(self, attacker, defender):
        # Base damage calculation
        base_damage = max(1, attacker.attack - defender.defense // 2)
        
        # Check for critical hit (player only)
        if attacker == self.player:
            if random.random() < self.player.crit_chance:
                base_damage = int(base_damage * self.player.crit_multiplier)
                self.add_message("Critical hit!")
                self.add_to_log("Critical hit!")
        
        # Add some randomness to damage
        damage = max(1, base_damage + random.randint(-1, 2))
        return damage
    
    def pick_up_item(self, item):
        self.items.remove(item)
        
        if hasattr(item, 'effect'):
            if item.effect == "heal":
                heal_amount = min(item.amount, self.player.max_hp - self.player.hp)
                self.player.hp += heal_amount
                self.add_message(f"You used {item.name} and healed {heal_amount} HP!")
                self.add_to_log(f"You used {item.name} and healed {heal_amount} HP!")
            elif item.effect == "attack":
                self.player.attack += item.amount
                self.add_message(f"You equipped {item.name}! Attack + {item.amount}.")
                self.add_to_log(f"You equipped {item.name}! Attack + {item.amount}.")
            elif item.effect == "defense":
                self.player.defense += item.amount
                self.player.max_hp += item.amount * 2
                self.player.hp += item.amount * 2
                self.add_message(f"You equipped {item.name}! Defense + {item.amount} and max HP + {item.amount * 2}.")
                self.add_to_log(f"You equipped {item.name}! Defense + {item.amount} and max HP + {item.amount * 2}.")
    
    def add_message(self, msg):
        self.message = msg
        self.message_time = pygame.time.get_ticks()
    
    def add_to_log(self, entry):
        # Split multi-line entries and add them in order
        for line in entry.split('\n'):
            self.combat_log.append(line)
        # Trim log if it gets too long
        if len(self.combat_log) > self.max_log_entries:
            self.combat_log = self.combat_log[-self.max_log_entries:]
    
    
    def draw(self):
        # Clear screen
        screen.fill(BLACK)
        
        # Calculate visible area
        start_x = max(0, self.camera_x // GRID_SIZE)
        start_y = max(0, self.camera_y // GRID_SIZE)
        end_x = min(self.map_width, (self.camera_x + SCREEN_WIDTH) // GRID_SIZE + 1)
        end_y = min(self.map_height, (self.camera_y + SCREEN_HEIGHT) // GRID_SIZE + 1)
        
        # Draw map
        for y in range(start_y, end_y):
            for x in range(start_x, end_x):
                screen_x = x * GRID_SIZE - self.camera_x
                screen_y = y * GRID_SIZE - self.camera_y
                tile = self.tiles[y][x]
                
                if tile.visible:
                    # Currently visible tiles - draw normally
                    if tile.type == 0:  # Wall
                        pygame.draw.rect(screen, STONE, (screen_x, screen_y, GRID_SIZE, GRID_SIZE))
                    elif tile.type == 1:  # Floor
                        pygame.draw.rect(screen, DARK_GRAY, (screen_x, screen_y, GRID_SIZE, GRID_SIZE))
                    elif tile.type == 2:  # Exit/Door
                        try:
                            # Load and draw the exit sprite if available
                            exit_sprite = load_base64_image(EXIT_IMAGE)
                            screen.blit(exit_sprite, (screen_x, screen_y))
                        except Exception as e:
                            # Fallback to simple representation if sprite fails to load
                            print(f"Failed to load exit sprite: {e}")  # Debug message
                            pygame.draw.rect(screen, YELLOW, (screen_x, screen_y, GRID_SIZE, GRID_SIZE))
                            exit_text = font_medium.render("E", True, BLACK)
                            screen.blit(exit_text, (screen_x, screen_y))
                elif tile.explored:
                    # Previously explored but not currently visible - draw darkened
                    if tile.type == 0:  # Wall
                        pygame.draw.rect(screen, (40, 40, 40), (screen_x, screen_y, GRID_SIZE, GRID_SIZE))
                    elif tile.type == 1:  # Floor
                        pygame.draw.rect(screen, (20, 20, 20), (screen_x, screen_y, GRID_SIZE, GRID_SIZE))
                    
                elif tile.explored:
                    # Previously explored but not currently visible
                    if tile.type == 0:  # Wall
                        pygame.draw.rect(screen, DARKER_GRAY, (screen_x, screen_y, GRID_SIZE, GRID_SIZE))
                    elif tile.type == 1:  # Floor
                        pygame.draw.rect(screen, BLACK, (screen_x, screen_y, GRID_SIZE, GRID_SIZE))
                        pygame.draw.rect(screen, (10, 10, 10), (screen_x, screen_y, GRID_SIZE, GRID_SIZE), 1)

        # Draw entities and items (only if visible)
        for entity in self.entities:
            if self.tiles[entity.y][entity.x].visible:
                screen_x = entity.x * GRID_SIZE - self.camera_x
                screen_y = entity.y * GRID_SIZE - self.camera_y
                entity.draw(screen, screen_x, screen_y, GRID_SIZE)
        
        for item in self.items:
            if self.tiles[item.y][item.x].visible:
                screen_x = item.x * GRID_SIZE - self.camera_x
                screen_y = item.y * GRID_SIZE - self.camera_y
                item.draw(screen, screen_x, screen_y, GRID_SIZE)
        
        # Draw player
        screen_x = self.player.x * GRID_SIZE - self.camera_x
        screen_y = self.player.y * GRID_SIZE - self.camera_y
        self.player.draw(screen, screen_x, screen_y, GRID_SIZE)
        
        # Draw UI
        self.draw_ui()
        
        # Draw message
        if pygame.time.get_ticks() - self.message_time < 3000:  # Show message for 3 seconds
            msg_surface = font_medium.render(self.message, True, WHITE)
            screen.blit(msg_surface, (10, SCREEN_HEIGHT - 40))
        
        # Draw game over screen
        if self.game_state == "game_over":
            self.draw_game_over()
            
        # Draw minimap
        if self.game_state == "playing":
            self.draw_minimap()
            
        pygame.display.flip()
    
    def draw_ui(self):
        # Draw semi-transparent UI panel
        ui_panel = pygame.Surface((SCREEN_WIDTH, 120), pygame.SRCALPHA)
        ui_panel.fill((0, 0, 0, 180))
        screen.blit(ui_panel, (0, SCREEN_HEIGHT - 120))
        
        # Draw health bar
        health_ratio = self.player.hp / self.player.max_hp
        bar_width = 200
        pygame.draw.rect(screen, DARK_GRAY, (20, SCREEN_HEIGHT - 100, bar_width, 20))
        pygame.draw.rect(screen, GREEN if health_ratio > 0.6 else YELLOW if health_ratio > 0.3 else RED, 
                        (20, SCREEN_HEIGHT - 100, bar_width * health_ratio, 20))
        health_text = font_small.render(f"HP: {self.player.hp}/{self.player.max_hp}", True, WHITE)
        screen.blit(health_text, (25, SCREEN_HEIGHT - 100))
        
        # Draw stats
        stats = [
            f"Level: {self.player.level}",
            f"XP: {self.player.exp}/{self.player.next_level}",
            f"Attack: {self.player.attack}",
            f"Defense: {self.player.defense}",
            f"Dungeon: {self.dungeon_level}",
            f"Crit: {int(self.player.crit_chance*100)}%"
        ]
        
        for i, stat in enumerate(stats):
            stat_text = font_small.render(stat, True, WHITE)
            screen.blit(stat_text, (250 + (i % 2) * 150, SCREEN_HEIGHT - 100 + (i // 2) * 20))
        
        # Draw combat log (now positioned at top left)
        log_panel = pygame.Surface((300, 230), pygame.SRCALPHA)
        log_panel.fill((0, 0, 0, 150))
        screen.blit(log_panel, (10, 10))  # Positioned at top left with 10px padding

        log_title = font_small.render("Combat Log:", True, WHITE)
        screen.blit(log_title, (20, 15))  # Slightly indented from panel edge

        # Display most recent entries in chronological order (oldest at top)
        y_offset = 35  # Start below title
        lines_to_show = min(10, len(self.combat_log))  # Show up to 10 lines
        start_index = max(0, len(self.combat_log) - lines_to_show)  # Start index for last 10 entries

        for i in range(start_index, len(self.combat_log)):
            log_entry = font_small.render(self.combat_log[i], True, WHITE)
            screen.blit(log_entry, (20, y_offset))  # Indented from panel edge
            y_offset += 20
        
        # Draw controls
        controls = font_small.render("WASD: Move     Q: Quit     R: Restart", True, WHITE)
        screen.blit(controls, (SCREEN_WIDTH - 300, SCREEN_HEIGHT - 30))
    
    def draw_game_over(self):
        overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, 200))
        screen.blit(overlay, (0, 0))
        
        game_over_text = font_large.render("GAME OVER", True, RED)
        screen.blit(game_over_text, (SCREEN_WIDTH//2 - game_over_text.get_width()//2, SCREEN_HEIGHT//2 - 50))
        
        restart_text = font_medium.render("Press R to restart or Q to quit", True, WHITE)
        screen.blit(restart_text, (SCREEN_WIDTH//2 - restart_text.get_width()//2, SCREEN_HEIGHT//2 + 20))
    
    def draw_minimap(self):
        # Create minimap surface
        minimap = pygame.Surface((MINIMAP_WIDTH, MINIMAP_HEIGHT), pygame.SRCALPHA)
        minimap.fill((0, 0, 0, 150))  # Semi-transparent black background
        
        # Calculate visible area on minimap
        start_x = max(0, self.player.x - MINIMAP_WIDTH // (2 * MINIMAP_CELL_SIZE))
        start_y = max(0, self.player.y - MINIMAP_HEIGHT // (2 * MINIMAP_CELL_SIZE))
        end_x = min(self.map_width, start_x + MINIMAP_WIDTH // MINIMAP_CELL_SIZE)
        end_y = min(self.map_height, start_y + MINIMAP_HEIGHT // MINIMAP_CELL_SIZE)
        
        # Draw explored tiles
        for y in range(start_y, end_y):
            for x in range(start_x, end_x):
                if self.tiles[y][x].explored:
                    # Calculate position on minimap
                    map_x = (x - start_x) * MINIMAP_CELL_SIZE
                    map_y = (y - start_y) * MINIMAP_CELL_SIZE
                    
                    # Choose color based on tile type
                    if self.tiles[y][x].type == 0:  # Wall
                        color = STONE
                    elif self.tiles[y][x].type == 1:  # Floor
                        color = DARK_GRAY
                    elif self.tiles[y][x].type == 2:  # Exit
                        color = YELLOW
                    
                    # Darken if not currently visible
                    if not self.tiles[y][x].visible:
                        color = tuple(c // 2 for c in color)
                    
                    pygame.draw.rect(minimap, color, 
                                    (map_x, map_y, MINIMAP_CELL_SIZE, MINIMAP_CELL_SIZE))
        
        # Draw player position
        player_map_x = (self.player.x - start_x) * MINIMAP_CELL_SIZE
        player_map_y = (self.player.y - start_y) * MINIMAP_CELL_SIZE
        pygame.draw.rect(minimap, GREEN, 
                        (player_map_x, player_map_y, MINIMAP_CELL_SIZE, MINIMAP_CELL_SIZE))
        
        # Draw a border around the minimap
        pygame.draw.rect(minimap, WHITE, (0, 0, MINIMAP_WIDTH, MINIMAP_HEIGHT), 1)
        
        # Blit the minimap to the screen
        screen.blit(minimap, MINIMAP_POSITION)
    
    def run(self):
        running = True
        self.update_fov()

        # Key repeat delay
        move_delay = 100  # in milliseconds
        last_move_time = 0

        while running:
            current_time = pygame.time.get_ticks()
            
            for event in pygame.event.get():
                if event.type == QUIT:
                    running = False

                if event.type == KEYDOWN:
                    if self.game_state == "playing":
                        if event.key == K_q:
                            running = False
                    elif self.game_state == "game_over":
                        if event.key == K_r:
                            # Preserve player stats
                            current_player = self.player
                            # Reinitialize game
                            self.__init__()
                            # Restore the player
                            self.player = current_player
                            # Regenerate dungeon
                            self.generate_dungeon()
                            self.update_fov()
                        elif event.key == K_q:
                            running = False

            # Key hold movement (continuous movement)
            if self.game_state == "playing":
                keys = pygame.key.get_pressed()
                if current_time - last_move_time >= move_delay:
                    dx, dy = 0, 0
                    if keys[K_w] or keys[K_UP]:
                        dy = -1
                    elif keys[K_s] or keys[K_DOWN]:
                        dy = 1
                    elif keys[K_a] or keys[K_LEFT]:
                        dx = -1
                    elif keys[K_d] or keys[K_RIGHT]:
                        dx = 1
                    if dx != 0 or dy != 0:
                        self.move_player(dx, dy)
                        last_move_time = current_time

            if self.game_state == "playing":
                self.update_camera()
                self.draw()

            clock.tick(FPS)

        pygame.quit()
        sys.exit()


# Run the game
if __name__ == "__main__":
    game = Game()
    game.run()
